#!/system/bin/sh

cat << CTAG
{
    name:HARD LIMIT,
    elements:[
    { SPane:{
		title:"Userspace DVFS Lock"
	}},
	{ SDescription:{
		description:" "
	}},
	{ SDescription:{
		description:"First Userspace DVFS Lock, then set the CPU Cores Maximum Frequency and CPU Cores Maximum Frequency. Next step go to the CPU-GOV Tab and set the frequencies and finally enable Frequency lock to prevent unwanted changes",
	}},
	{ SDescription:{
		description:" "
	}},
	{ SOptionList:{
		title:"Set userspace_dvfs_lock",		
		description:" Lock min and max frequencies to prevent overwriting by another drivers. First set your min/max frequencies and then lock it. Default Off.",
		default:`cat /sys/kernel/cpufreq_hardlimit/userspace_dvfs_lock`,
		action:"generic /sys/kernel/cpufreq_hardlimit/userspace_dvfs_lock",
		values:{
			"0":"Disabled",
			"1":"Enabled",
			}
	}},
	{ SDescription:{
		description:" "
	}},
	{ SPane:{
		title:"Overclock CPU Frequency Settings"
	}},
	{ SDescription:{
		description:" "
	}},
	{ SSeekBar:{
		title:"CPU Cores Maximum Frequency",		
		description:" Set the real hard CPU max frequency limit. OC to max 3072 MHz. Be careful, your device may reboot if if cannot handle OC! Default is 2649.6 MHz.",
		unit:" MHz",
		weight:0.001,
		default:`cat /sys/kernel/cpufreq_hardlimit/scaling_max_freq`,
		action:"generic /sys/kernel/cpufreq_hardlimit/scaling_max_freq",
		values:[`while read values; do busybox printf "%s, \n" $values; done < /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies`]
	}},
	{ SDescription:{
		description:" "
	}},
	{ SPane:{
		title:"Underclock CPU Frequency Settings"
	}},
	{ SDescription:{
		description:" "
	}},
	{ SSeekBar:{
		title:"CPU Cores Minimum Frequency",		
		description:" Set the real hard CPU min frequency limit. Default is 300 MHz.",
		unit:" MHz",
		weight:0.001,
		default:`cat /sys/kernel/cpufreq_hardlimit/scaling_min_freq`,
		action:"generic /sys/kernel/cpufreq_hardlimit/scaling_min_freq",
		values:[`while read values; do busybox printf "%s, \n" $values; done < /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies`]
	}},
	{ SDescription:{
		description:" "
	}},
	{ SPane:{
		title:" "
	}},
	{ SButton:{
		label:"Version information",
		action:"show hard"
	}},
	{ STitleBar:{
		title:"CPU Boost",
	}},
	{ SDescription:{
		description:"When certain important tasks migrate from a fast CPU to a slow CPU, CPU Boost Driver boosts the frequency of the slow CPU to at least as high as the fast CPU for a short duration. You can modify behavior of CPU Boost Driver below. CPU Boost helps alleviating poor user experience by elevating frequencies when required."
	}},
	{ SOptionList:{
       		title:"Enable or disable CPU Boost.",
			description:"Default On",
			default:`cat /sys/module/cpu_boost/parameters/cpuboost_enable`,
			action:"generic /sys/module/cpu_boost/parameters/cpuboost_enable",
			values:{
				"N":"Disabled",
				"Y":"Enabled",
			}
	}},
	{ SSeekBar:{
		title:"Boost Duration",
		description:"Sets boost period for which CPU is boosted when task migrates to slower CPU.",
		min:0, max:120,
		default:`cat /sys/module/cpu_boost/parameters/boost_ms`,
		unit:" ms",
		action:"generic /sys/module/cpu_boost/parameters/boost_ms",
	}},
	{ SSeekBar:{
		title:"Input Boost Duration",
		description:"Sets period for which idle CPU is boosted whenever there are incoming input/hotplug/wakeup_boost events. Keep this higher enough to get smoother experience on your rocking device.",
		min:0, max:1000, step: 10,
		default:`cat /sys/module/cpu_boost/parameters/input_boost_ms`,
		unit:" ms",
		action:"generic /sys/module/cpu_boost/parameters/input_boost_ms",
	}},
	{ SSeekBar:{
       		title:"CPU0 Input Boost Frequency",
		description:"Set the input boost frequency for CPU0.",
		default:1497600,
		action:"cpuboostibf 0",
		values:{
			0:"Disabled",
`
			while read FREQ TIME; do
				LABEL=$(expr $FREQ / 1000)
				echo "$FREQ:\"${LABEL}MHz\", "
			done < /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state
`
		}
	}},
	{ SSeekBar:{
       		title:"CPU1 Input Boost Frequency",
		description:"Set the input boost frequency for CPU1.",
		default:1497600,
		action:"cpuboostibf 1",
		values:{
			0:"Disabled",
`
			while read FREQ TIME; do
				LABEL=$(expr $FREQ / 1000)
				echo "$FREQ:\"${LABEL}MHz\", "
			done < /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state
`
		}
	}},
	{ SSeekBar:{
       		title:"CPU2 Input Boost Frequency",
		description:"Set the input boost frequency for CPU2.",
		default:1497600,
		action:"cpuboostibf 2",
		values:{
			0:"Disabled",
`
			while read FREQ TIME; do
				LABEL=$(expr $FREQ / 1000)
				echo "$FREQ:\"${LABEL}MHz\", "
			done < /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state
`
		}
	}},
	{ SSeekBar:{
       		title:"CPU3 Input Boost Frequency",
		description:"Set the input boost frequency for CPU3.",
		default:1497600,
		action:"cpuboostibf 3",
		values:{
			0:"Disabled",
`
			while read FREQ TIME; do
				LABEL=$(expr $FREQ / 1000)
				echo "$FREQ:\"${LABEL}MHz\", "
			done < /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state
`
		}
	}},
	{ SSeekBar:{
       		title:"Sync Threshold",
		description:"During CPU Boost, frequency of slower CPU is matched with that of faster CPU, we can set limit to maximum frequency allowed for frequency synchronization. Should be greater or equal to Input Event Boost Frequency.",
		default:1497600,
		action:"generic /sys/module/cpu_boost/parameters/sync_threshold",
		values:{
`
			while read FREQ TIME; do
				LABEL=$(expr $FREQ / 1000)
				echo "$FREQ:\"${LABEL}MHz\", "
			done < /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state
`
		}
	}},
	{ SCheckBox:{
		label:"Hotplug Boost",
		description:"Hotplug Boost is similar to input boost but it occurs when CPUs go online. If Hotplug Boost is active, Wakeup Boost will be disabled on the next restart of Synapse",
		default:1,
		action:"boost hotplug",
	}},
	{ SCheckBox:{
		label:"Wakeup Boost",
		description:"Wakeup Boost is similar to input boost but it occurs when screen is turned on. If Wakeup Boost is active Hotplug Boost will be disabled on the next restart of Synapse",
		default:0,
		action:"boost wakeup",
	}},
	{ SPane:{
		title:"Power-efficient Workqueues",
	}},
	{ SCheckBox:{
		label:"Enable",
		description:"This will help to reduce power consumption at the cost of slight performance overhead. PE workqueues are used for unbound scheduled work to save load on sibling CPU cores and queuing work on CPU0.",
		default:1,
		action:"boolean /sys/module/workqueue/parameters/power_efficient",
	}},
	{ SPane:{
		title:"PowerSuspend",
		description:" PowerSuspend driver is a replacement for the early_suspend/late_resume driver. Hybrid uses autosleep & display panel hook. Default is Hybrid."
	}},
	{ SDescription:{
		description:" "
	}},
	{ SOptionList:{
		default:`cat /sys/kernel/power_suspend/power_suspend_mode`,
		action:"generic /sys/kernel/power_suspend/power_suspend_mode",
		values:{
				"1":"Userspace_trigger",
				"2":"DisplayPanel_hook",
			}
	}},
	{ SDescription:{
		description:" "
	}},
	{ SSeekBar:{
		title:"PowerSuspend State",
		description:" Kernel power management driver when screen is off. Better battery savings if enabled. Note: You can only change this setting if PowerSuspend Mode is set to Userspace_trigger.",
		min:0,
		max:1,
		step:1,
		default:`cat /sys/kernel/power_suspend/power_suspend_state`,
		action:"suspend_state /sys/kernel/power_suspend/power_suspend_state"
	}},
	{ SDescription:{
		description:" "
	}},
	{ SButton:{
		label:"PowerSuspend version",
		action:"show susp"	
	}},
	{ SDescription:{
		description:" "
	}},
	]
}
CTAG
