# By UpInTheAir

BB=/sbin/busybox;

case $1 in
tcp_security)
  $BB mount -t rootfs -o remount,rw rootfs;
  P=/data/.emotionkernel/tcp_security
  if [ ! -z $2 ]; then
  if [ $2 == Disabled ]; then
    echo 0 > $P
    	echo 128 > /proc/sys/net/ipv4/tcp_max_syn_backlog
    	echo 6 > /proc/sys/net/ipv4/tcp_syn_retries
    	echo 5 > /proc/sys/net/ipv4/tcp_synack_retries
    	echo 4096 > /proc/sys/net/ipv4/tcp_max_tw_buckets
    	echo 0 > /proc/sys/net/ipv4/icmp_echo_ignore_all
    	echo 0 > /proc/sys/net/ipv4/tcp_no_metrics_save
    	echo 60 > /proc/sys/net/ipv4/tcp_fin_timeout
    	echo 75 > /proc/sys/net/ipv4/tcp_keepalive_intvl
   	echo 9 > /proc/sys/net/ipv4/tcp_keepalive_probes
    	echo 7200 > /proc/sys/net/ipv4/tcp_keepalive_time
    	echo 1 > /proc/sys/net/ipv4/conf/all/send_redirects
    	echo 1 > /proc/sys/net/ipv4/conf/default/send_redirects
    	echo 0 > /proc/sys/net/ipv4/conf/all/rp_filter
    	echo 0 > /proc/sys/net/ipv4/conf/default/rp_filter
    	echo 1 > /proc/sys/net/ipv4/conf/default/accept_source_route
    	echo 1 > /proc/sys/net/ipv4/conf/all/accept_redirects
    	echo 1 > /proc/sys/net/ipv4/conf/default/accept_redirects
    	echo 1 > /proc/sys/net/ipv4/conf/all/secure_redirects
    	echo 1 > /proc/sys/net/ipv4/conf/default/secure_redirects
  elif [ $2 == Enabled ]; then
    echo 1 > $P
	echo 1024 > /proc/sys/net/ipv4/tcp_max_syn_backlog
	echo 2 > /proc/sys/net/ipv4/tcp_syn_retries
	echo 2 > /proc/sys/net/ipv4/tcp_synack_retries
	echo 16384 > /proc/sys/net/ipv4/tcp_max_tw_buckets
	echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_all
	echo 1 > /proc/sys/net/ipv4/tcp_no_metrics_save
	echo 15 > /proc/sys/net/ipv4/tcp_fin_timeout
	echo 30 > /proc/sys/net/ipv4/tcp_keepalive_intvl
	echo 5 > /proc/sys/net/ipv4/tcp_keepalive_probes
	echo 1800 > /proc/sys/net/ipv4/tcp_keepalive_time
	echo 0 > /proc/sys/net/ipv4/conf/all/send_redirects
	echo 0 > /proc/sys/net/ipv4/conf/default/send_redirects
	echo 1 > /proc/sys/net/ipv4/conf/all/rp_filter
	echo 1 > /proc/sys/net/ipv4/conf/default/rp_filter
	echo 0 > /proc/sys/net/ipv4/conf/default/accept_source_route
	echo 0 > /proc/sys/net/ipv4/conf/all/accept_redirects
	echo 0 > /proc/sys/net/ipv4/conf/default/accept_redirects
	echo 0 > /proc/sys/net/ipv4/conf/all/secure_redirects
	echo 0 > /proc/sys/net/ipv4/conf/default/secure_redirects
  fi; fi
  copy=`cat $P`
  if [ $copy == 0 ]; then
    echo Disabled
  elif [ $copy == 1 ]; then
    echo Enabled
  fi
  ;;
dns)
  $BB mount -t rootfs -o remount,rw rootfs;
  P=/data/.emotionkernel/dns
  if [ ! -z $2 ]; then
  if [ $2 == Disabled ]; then
    echo 0 > $P
	setprop net.rmnet0.dns1 0.0.0.0
	setprop net.rmnet0.dns2 0.0.0.0
  elif [ $2 == Google ]; then
    echo 1 > $P
	setprop net.rmnet0.dns1 8.8.8.8
	setprop net.rmnet0.dns2 8.8.8.4
  elif [ $2 == OpenDNS ]; then
    echo 2 > $P
	setprop net.rmnet0.dns1 208.67.222.222
	setprop net.rmnet0.dns2 208.67.220.220
  elif [ $2 == Comodo ]; then
    echo 3 > $P
	setprop net.rmnet0.dns1 8.26.56.26
	setprop net.rmnet0.dns2 8.20.247.20
  elif [ $2 == Level3 ]; then
    echo 4 > $P
	setprop net.rmnet0.dns1 4.2.2.1
	setprop net.rmnet0.dns2 4.2.2.2
  elif [ $2 == Norton_DNS ]; then
    echo 5 > $P
	setprop net.rmnet0.dns1 198.153.192.1
	setprop net.rmnet0.dns2 198.153.194.1
  elif [ $2 == Smart_Viper ]; then
    echo 6 > $P
	setprop net.rmnet0.dns1 208.76.50.50
	setprop net.rmnet0.dns2 208.76.51.51
  fi; fi
  copy=`cat $P`
  if [ $copy == 0 ]; then
    echo Disabled
  elif [ $copy == 1 ]; then
    echo Google
  elif [ $copy == 2 ]; then
    echo OpenDNS
  elif [ $copy == 3 ]; then
    echo Comodo
  elif [ $copy == 4 ]; then
    echo Level3
  elif [ $copy == 5 ]; then
    echo Norton_DNS
  elif [ $copy == 6 ]; then
    echo Smart_Viper
  fi
  ;;
tcp_speed)
  $BB mount -t rootfs -o remount,rw rootfs;
  P=/data/.emotionkernel/tcp_speed
  if [ ! -z $2 ]; then
  if [ $2 == Disabled ]; then
    echo 0 > $P
	setprop net.tcp.buffersize.default 4096,87380,704512,4096,16384,110208
	setprop net.tcp.buffersize.wifi    524288,1048576,4525824,524288,1048576,4525824
	setprop net.tcp.buffersize.lte     524288,1048576,2560000,524288,1048576,2560000
	setprop net.tcp.buffersize.umts    4094,87380,704512,4096,16384,110208
	setprop net.tcp.buffersize.hspa    4094,87380,704512,4096,16384,262144
	setprop net.tcp.buffersize.hsupa   4094,87380,704512,4096,16384,262144
	setprop net.tcp.buffersize.hsdpa   4094,87380,704512,4096,16384,262144
	setprop net.tcp.buffersize.hspap   4094,87380,1220608,4096,16384,1220608
	setprop net.tcp.buffersize.edge    4093,26280,35040,4096,16384,35040
	setprop net.tcp.buffersize.gprs    4092,30000,30000,4096,8760,11680
	setprop net.tcp.buffersize.evdo    4094,87380,262144,4096,16384,262144
  elif [ $2 == Enabled ]; then
    echo 1 > $P
	setprop net.tcp.buffersize.default 6144,87380,110208,6144,16384,110208
	setprop net.tcp.buffersize.wifi    262144,524288,1048576,262144,524288,1048576
	setprop net.tcp.buffersize.lte     262144,524288,3145728,262144,524288,3145728
	setprop net.tcp.buffersize.umts    6144,87380,110208,6144,16384,110208
	setprop net.tcp.buffersize.hspa    6144,87380,262144,6144,16384,262144
	setprop net.tcp.buffersize.hsupa   6144,262144,1048576,6144,262144,1048576
	setprop net.tcp.buffersize.hsdpa   6144,262144,1048576,6144,262144,1048576
	setprop net.tcp.buffersize.edge    6144,26280,35040,6144,16384,35040
	setprop net.tcp.buffersize.gprs    6144,8760,11680,6144,8760,11680
	setprop net.tcp.buffersize.evdo    6144,262144,1048576,6144,262144,1048576
  fi; fi
  copy=`cat $P`
  if [ $copy == 0 ]; then
    echo Disabled
  elif [ $copy == 1 ]; then
    echo Enabled
  fi
  ;;
esac
