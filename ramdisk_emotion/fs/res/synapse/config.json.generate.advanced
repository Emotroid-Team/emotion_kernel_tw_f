#!/system/bin/sh

cat << CTAG
{
    name:KERNEL TWEAKS,
    elements:[
			`if [ -f "/sys/devices/virtual/block/zram0/disksize" ]; then
			ZRAM=\`$BB cat /sys/devices/virtual/block/zram0/disksize\`;
			ZRAM=$((ZRAM / 1024 / 1024));
			$BB echo '{ SPane:{
				title:"ZRAM",
				description:"Attempts to increase performance by avoiding paging on physical storage, instead using a compressed virtual device in RAM. Paging takes place in RAM until it is necessary to use the swap space on physical storage."
			}},
				{ SSeekBar:{
					unit:" MB",
					step:1,
					min:0,
					max:1024, 
					default:'$ZRAM',
					action:"zram /sys/devices/virtual/block/zram0/disksize"
				}},'
			fi`
			`if [ -f "/sys/block/zram0/comp_algorithm" ]; then
			CA=\`$BB echo $(/res/synapse/actions/bracket-option /sys/block/zram0/comp_algorithm)\`;
				$BB echo '{ SOptionList:{
					title:"Compression Algorithm",
					description:"Applying a different option will reset Z-RAM. LZ4 algorithm tends to have a faster decompression. More info: <a href='https://code.google.com/p/lz4/'>HERE</a>.",
					default:'$CA',
					action:"bracket-option /sys/block/zram0/comp_algorithm",
					values:['
						for COMPALG in \`$BB cat /sys/block/zram0/comp_algorithm | $BB sed -e "s/\]//;s/\[//"\`; do
							echo "\"$COMPALG\",";
						done;
					$BB echo '],
					notify:[
						{
							on:APPLY,
							do:[ RESET, REFRESH, APPLY ],
							to:"zram /sys/devices/virtual/block/zram0/disksize"
						}
					]
				}},'
			fi`
			`if [ -f "/sys/block/zram0/max_comp_streams" ]; then
			MCS=\`$BB cat /sys/block/zram0/max_comp_streams\`;
				$BB echo '{ SSeekBar:{
					title:"Max Compression Streams",
					description:"Applying a different option will reset Z-RAM. Can have N write operations (depending on size of streams list) executing in parallel.",
					min:1,
					max:5,
					step:1,
					default:'$MCS',
					action:"generic /sys/block/zram0/max_comp_streams",
					notify:[
						{
							on:APPLY,
							do:[ RESET, REFRESH, APPLY ],
							to:"zram /sys/devices/virtual/block/zram0/disksize"
						}
					]
				}},'
			fi`    
	`if [ -f "/sys/module/lowmemorykiller/parameters/minfree" ]; then
				$BB echo '{ SPane:{
					title:"Low Memory Killer",
					description:"LMK Minfree controls how much memory each app type can hold, and is responsible for memory management for multitasking."
				}},
					{ SOptionList:{
						title:"LMK Profile",
						description:"This option will auto-tune LMK minfree values as per selected profile.",
						default:Custom,
						action:"lmk profile",
						values:[ Custom, Low, Medium, Default, Aggressive, Exterminate,
						],
						notify:[
								{
									on:APPLY,
									do:[ REFRESH, APPLY ],
									to:[ 
											"lmk 1",
											"lmk 2",
											"lmk 3",
											"lmk 4",
											"lmk 5",
											"lmk 6"
									],
								}
						]
					}},'
					for LMK in 1 2 3 4 5 6; do
						$BB echo '{ SSeekBar:{ '
							case $LMK in
								1)
									$BB echo 'title:"Foreground App", description:"The application currenty on the screen and running."' ;;
								2)
									$BB echo 'title:"Visible App", description:"The application that is open and running in background."' ;;
								3)
									$BB echo 'title:"Secondary Server", description:"This is a service an application needs that is alive and ready."' ;;
								4)
									$BB echo 'title:"Hidden App", description:"An idle process that wakes up on application request."' ;;
								5)
									$BB echo 'title:"Content Provider", description:"Apps that provide data (content) to the system."' ;;
								6)
									$BB echo 'title:"Empty App", description:"Apps closed by the user but ready to run."' ;;
							esac
						$BB echo ', action:"lmk '${LMK}'",
						unit:"MB", min:1, max:300 }},'
					done
			fi`
    { SPane:{
		title:"Kernel Entropy"
    }},
	{ SLiveLabel:{
		title:"Entropy Available",
		refresh:1000,
		action:"show entropy"
	}},
	{ SSeekBar:{
		title:"Read Wakeup Threshold",
		max:2048, min:64, step:64,
		default:`cat /proc/sys/kernel/random/read_wakeup_threshold`,
		action:"generic /proc/sys/kernel/random/read_wakeup_threshold"
	}},
	{ SSeekBar:{
		title:"Write Wakeup Threshold",
		max:2048, min:64, step:64,
		default:`cat /proc/sys/kernel/random/write_wakeup_threshold`,
		action:"generic /proc/sys/kernel/random/write_wakeup_threshold"
	}},
{ SPane:{
		title:"Gentle Fair Sleepers",
		description:" Sleeper Fairness is a concept used by CFS which treat sleeping/waiting tasks as if they were in a run queue. This implies tasks which spend most of the time waiting for an user input and such will get a fair share of CPU when they need it. Disabling Gentle Fair Sleepers could improve UI responsiveness. Default is Disabled."
	}},
      	{ SDescription:{
		description:""
	}},
	{ SCheckBox:{
		label:"Enable or Disable Gentle Fair Sleepers",
		default:`cat /sys/kernel/sched/gentle_fair_sleepers`,
		action:"generic /sys/kernel/sched/gentle_fair_sleepers"
	}},
	{ SPane:{
		title:"panic",
		description:" Set to zero to have the kernel loop on a panic or auto-reboot after this number of seconds. Default is 1.",
	}},
	{ SSeekBar:{
		max:30,
		min:0,
		step:1,
		unit:" s",
		default:`cat /proc/sys/kernel/panic`,
		action:"generic /proc/sys/kernel/panic",
	}},
	{ SPane:{
		title:"panic_on_oops",
		description:" Disable to have the kernel continue operations after a software failure. Default is Enabled.",
	}},
	{ SCheckBox:{
		label:"Enable or Disable panic_on_oops",
		default:`cat /proc/sys/kernel/panic_on_oops`,
		action:"generic /proc/sys/kernel/panic_on_oops",
    }},
    ]
}
CTAG
